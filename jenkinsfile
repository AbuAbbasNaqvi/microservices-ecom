#!/usr/bin/env groovy

pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_ORG = 'abbasnaqvi'
        DOCKER_CREDENTIALS = credentials('dockerhub')
        KUBE_CONFIG = credentials('kubernetes-config')
    }

    parameters {
        string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version')
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    // Ensure the shared library is loaded within a node context
                    lib = load 'jenkins/config/pipeline-libraries.groovy'
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Docker Login') {
            steps {
                sh """
                    echo ${DOCKER_CREDENTIALS_PSW} | docker login -u ${DOCKER_CREDENTIALS_USR} --password-stdin
                """
            }
        }

        stage('Build and Push Services') {
            steps {
                script {
                    def services = ['cart', 'payment', 'request']
                    
                    for (service in services) {
                        dir("services/${service}") {
                            lib.dockerBuild(service, params.build_version)
                        }
                    }
                }
            }
        }

        stage('Configure Kubernetes') {
            steps {
                sh """
                    mkdir -p ~/.kube
                    echo "${KUBE_CONFIG}" > ~/.kube/config
                    chmod 600 ~/.kube/config
                """
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh """
                    kubectl apply -f k8s/namespaces/
                    kubectl apply -f k8s/config/
                    kubectl apply -f k8s/services/
                """
                
                script {
                    def services = ['cart', 'payment', 'request']
                    for (service in services) {
                        lib.kubernetesUpdate(service, params.build_version)
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            sh 'rm -f ~/.kube/config'
        }
        success {
            script {
                def emailBody = """
                    Build completed successfully
                    Job: ${env.JOB_NAME}
                    Build Number: ${env.BUILD_NUMBER}
                    Build URL: ${env.BUILD_URL}
                """
                
                emailext(
                    subject: "Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: emailBody,
                    to: env.EMAIL_RECIPIENTS ?: 'team@example.com',
                    recipientProviders: [[$class: 'DevelopersRecipientProvider']]
                )
            }
        }
        failure {
            script {
                def emailBody = """
                    Build failed
                    Job: ${env.JOB_NAME}
                    Build Number: ${env.BUILD_NUMBER}
                    Build URL: ${env.BUILD_URL}
                """
                
                emailext(
                    subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: emailBody,
                    to: env.EMAIL_RECIPIENTS ?: 'team@example.com',
                    recipientProviders: [[$class: 'DevelopersRecipientProvider']]
                )
            }
        }
    }
}
