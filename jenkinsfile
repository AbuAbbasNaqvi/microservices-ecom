pipeline {
  agent any
  parameters {
    string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version to use for Docker image')
  }
  
  stages {
    stage('Checkout') {
      steps {
        git branch: 'master', url: 'https://github.com/AbuAbbasNaqvi/demo-java-app-ci.git'
        sh 'ls -al'  // Verify the presence of package.json
      }
    }

    stage('Test') {
      steps {
        // Ensure the correct directory is being used
        dir('/') {
        sh 'npm install'  // Install dependencies from the root package.json
        sh 'npm run test'  // Run tests from the root directory
      }
    }

    stage('Build and Push Docker Images') {
      parallel {
        stage('Cart Service') {
          steps {
            dir('services/cart') {
              script {
                def VERSION = params.build_version
                docker.build("${DOCKER_REGISTRY}/cart-service:${VERSION}")
                docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS_ID) {
                  docker.image("${DOCKER_REGISTRY}/cart-service:${VERSION}").push()
                }
              }
            }
          }
        }

        stage('Payment Service') {
          steps {
            dir('services/payment') {
              script {
                def VERSION = params.build_version
                docker.build("${DOCKER_REGISTRY}/payment-service:${VERSION}")
                docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS_ID) {
                  docker.image("${DOCKER_REGISTRY}/payment-service:${VERSION}").push()
                }
              }
            }
          }
        }

        stage('Request Service') {
          steps {
            dir('services/request') {
              script {
                def VERSION = params.build_version
                docker.build("${DOCKER_REGISTRY}/request-service:${VERSION}")
                docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS_ID) {
                  docker.image("${DOCKER_REGISTRY}/request-service:${VERSION}").push()
                }
              }
            }
          }
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        script {
          sh """
            kubectl apply -f k8s/namespaces/
            kubectl apply -f k8s/config/
            kubectl apply -f k8s/services/
            kubectl set image deployment/cart-service cart-service=${DOCKER_REGISTRY}/cart-service:${params.build_version} -n ecommerce
            kubectl set image deployment/payment-service payment-service=${DOCKER_REGISTRY}/payment-service:${params.build_version} -n ecommerce
            kubectl set image deployment/request-service request-service=${DOCKER_REGISTRY}/request-service:${params.build_version} -n ecommerce
          """
        }
      }
    }
  }

  post {
    success {
      emailext(
        subject: "Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
        The build and deployment process has completed successfully.
        Job Name: ${env.JOB_NAME}
        Build Number: ${env.BUILD_NUMBER}
        """,
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
    }
    failure {
      emailext(
        subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
        The build and deployment process has failed.
        Job Name: ${env.JOB_NAME}
        Build Number: ${env.BUILD_NUMBER}
        Please check the Jenkins logs for more details.
        """,
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
    }
  }
}
