pipeline {
  agent any
  
  environment {
    DOCKER_REGISTRY = 'docker.io'
    DOCKER_ORG = 'abbasnaqvi'
    DOCKER_CREDENTIALS = credentials('dockerhub')  // Jenkins credentials ID
  }

  parameters {
    string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build and Push Docker Images') {
      steps {
        script {
          // Login to Docker Hub
          sh """
            echo ${DOCKER_CREDENTIALS_PSW} | docker login -u ${DOCKER_CREDENTIALS_USR} --password-stdin
          """
          
          // Build and push services
          ['cart', 'payment', 'request'].each { service ->
            dir("services/${service}") {
              def imageTag = "${DOCKER_ORG}/${service}-service:${params.build_version}"
              sh """
                docker build -t ${imageTag} .
                docker push ${imageTag}
              """
            }
          }
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        script {
          sh """
            kubectl apply -f k8s/namespaces/
            kubectl apply -f k8s/config/
            kubectl apply -f k8s/services/
            
            kubectl set image deployment/cart-service cart-service=${DOCKER_ORG}/cart-service:${params.build_version} -n ecommerce
            kubectl set image deployment/payment-service payment-service=${DOCKER_ORG}/payment-service:${params.build_version} -n ecommerce
            kubectl set image deployment/request-service request-service=${DOCKER_ORG}/request-service:${params.build_version} -n ecommerce
          """
        }
      }
    }
  }

  post {
    always {
      sh 'docker logout'
    }
    success {
      emailext(
        subject: "Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
          Build completed successfully
          Job: ${env.JOB_NAME}
          Build Number: ${env.BUILD_NUMBER}
          Build URL: ${env.BUILD_URL}
        """,
        to: 'your.email@example.com',
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
    }
    failure {
      emailext(
        subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
          Build failed
          Job: ${env.JOB_NAME}
          Build Number: ${env.BUILD_NUMBER}
          Build URL: ${env.BUILD_URL}
        """,
        to: 'your.email@example.com',
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
    }
  }
}
