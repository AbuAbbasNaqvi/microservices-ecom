#!/usr/bin/env groovy

pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_ORG = 'abbasnaqvi'
    }

    parameters {
        string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    dockerUtils.login('dockerhub')
                }
            }
        }

        stage('Build and Push Services') {
            steps {
                script {
                    def services = ['cart', 'payment', 'request']
                    
                    for (service in services) {
                        dir("services/${service}") {
                            dockerUtils.buildAndPush(service, params.build_version, env.DOCKER_ORG)
                        }
                    }
                }
            }
        }

        stage('Configure Kubernetes') {
            steps {
                script {
                    kubeUtils.setupConfig('kubernetes-config')
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh """
                    kubectl apply -f k8s/namespaces/
                    kubectl apply -f k8s/config/
                    kubectl apply -f k8s/services/
                """
                
                script {
                    def services = ['cart', 'payment', 'request']
                    for (service in services) {
                        kubeUtils.deploy(service, params.build_version, env.DOCKER_ORG)
                    }
                }
            }
        }
    }

    post {
        always {
            node('any') {
                script {
                    dockerUtils.logout()
                    kubeUtils.cleanup()
                }
            }
        }
        success {
            script {
                notificationUtils.sendBuildNotification('Success')
            }
        }
        failure {
            script {
                notificationUtils.sendBuildNotification('Failed')
            }
        }
    }
}
