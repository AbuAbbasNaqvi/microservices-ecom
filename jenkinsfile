pipeline {
  agent any
  
  environment {
    DOCKER_REGISTRY = 'docker.io'
    REGISTRY_CREDENTIALS = credentials('dockerhub')
    SERVICES = ['cart', 'payment', 'request']
  }

  parameters {
    string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build Services') {
      steps {
        script {
          buildServices()
        }
      }
    }

    stage('Deploy') {
      steps {
        script {
          deployToKubernetes()
        }
      }
    }
  }

  post {
    always {
      script {
        sendNotification(currentBuild.result)
      }
    }
  }
}

// Shared functions
def buildServices() {
  for (service in env.SERVICES) {
    dir("services/${service}") {
      def imageTag = "${DOCKER_REGISTRY}/${service}-service:${params.build_version}"
      docker.build(imageTag)
      docker.withRegistry("https://${DOCKER_REGISTRY}", REGISTRY_CREDENTIALS) {
        docker.image(imageTag).push()
      }
    }
  }
}

def deployToKubernetes() {
  sh """
    kubectl apply -f k8s/namespaces/
    kubectl apply -f k8s/config/
    kubectl apply -f k8s/services/
  """
  
  for (service in env.SERVICES) {
    sh """
      kubectl set image deployment/${service}-service ${service}-service=${DOCKER_REGISTRY}/${service}-service:${params.build_version} -n ecommerce
    """
  }
}

def sendNotification(buildStatus) {
  def subject = "${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
  def body = """
    Build: ${env.JOB_NAME} #${env.BUILD_NUMBER}
    Status: ${buildStatus}
    Details: ${env.BUILD_URL}
  """
  
  emailext(
    subject: subject,
    body: body,
    recipientProviders: [[$class: 'DevelopersRecipientProvider']]
  )
}
