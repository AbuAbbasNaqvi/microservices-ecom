pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_ORG = 'abbasnaqvi'
        DOCKER_CREDENTIALS = credentials('dockerhub')
    }

    parameters {
        string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'npm install'
            }
        }

        stage('Docker Login') {
            steps {
                sh """
                    echo \${DOCKER_CREDENTIALS_PSW} | docker login -u \${DOCKER_CREDENTIALS_USR} --password-stdin
                """
            }
        }

        stage('Build and Push Services') {
            steps {
                script {
                    def services = ['cart', 'payment', 'request']
                    
                    for (service in services) {
                        dir("services/${service}") {
                            def imageTag = "${DOCKER_ORG}/${service}-service:${params.build_version}"
                            sh """
                                docker build -t ${imageTag} .
                                docker push ${imageTag}
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
        }
        post {
       failure {
             emailext body: '''${SCRIPT, template="groovy-html.template"}''', 
                      subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - Failed", 
                      mimeType: 'text/html',to: "ashfaque.s510@gmail.com"
      }
      success {
            emailext body: '''${SCRIPT, template="groovy-html.template"}''', 
                     subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - Successful", 
                     mimeType: 'text/html',to: "ashfaque.s510@gmail.com"
      }      
   }
}

